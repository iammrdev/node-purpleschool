import { Scenes, Telegraf } from 'telegraf';
import LocalSession from 'telegraf-session-local';
import { back } from './controllers/back';
import { start } from './controllers/start';
import { subscribeScene } from './controllers/subscribe';
import { MyContext } from './types';

const token = process.env.TOKEN;

if (!token) {
    throw new Error('–ù–∞ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω');
}

export const setupBot = () => {
    const bot = new Telegraf<MyContext>(token);

    const stage = new Scenes.Stage([subscribeScene]);

    bot.use(new LocalSession({ database: 'session.json' }).middleware());
    bot.use(stage.middleware());
    bot.use((ctx, next) => {
        console.log({ myProp: ctx.session.myProp });
        console.log({ myProps: ctx.scene?.session.myProps });

        if (!ctx.session.state) {
            ctx.session.state = {};
        }

        if (!ctx.session.state.userId) {
            ctx.session.state.userId = ctx.message?.from.id;
        }

        return next();
    });

    bot.start(start);

    bot.hears('‚úÖ –í –º–µ–Ω—é', back);
    bot.hears('üåè –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏–∏', (ctx) => ctx.scene.enter('subscribe'));
    bot.hears('üçÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', (ctx) => ctx.reply('–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∞–º—ã–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∞–∫—Ü–∏—è–º–∏'));

    return bot;
};
